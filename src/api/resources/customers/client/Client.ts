/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Paid from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";

export declare namespace Customers {
    export interface Options {
        environment?: core.Supplier<environments.PaidEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Customers {
    protected readonly _options: Customers.Options;

    constructor(_options: Customers.Options) {
        this._options = _options;
    }

    /**
     * @param {Customers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.list()
     */
    public list(requestOptions?: Customers.RequestOptions): core.HttpResponsePromise<Paid.Customer[]> {
        return core.HttpResponsePromise.fromPromise(this.__list(requestOptions));
    }

    private async __list(requestOptions?: Customers.RequestOptions): Promise<core.WithRawResponse<Paid.Customer[]>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PaidEnvironment.Production,
                "customers",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Paid.Customer[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PaidError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PaidError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PaidTimeoutError("Timeout exceeded when calling GET /customers.");
            case "unknown":
                throw new errors.PaidError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Paid.CustomerCreate} request
     * @param {Customers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.create({
     *         name: "Acme, Inc.",
     *         externalId: "acme-inc"
     *     })
     */
    public create(
        request: Paid.CustomerCreate,
        requestOptions?: Customers.RequestOptions,
    ): core.HttpResponsePromise<Paid.Customer> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Paid.CustomerCreate,
        requestOptions?: Customers.RequestOptions,
    ): Promise<core.WithRawResponse<Paid.Customer>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PaidEnvironment.Production,
                "customers",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Paid.Customer, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PaidError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PaidError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PaidTimeoutError("Timeout exceeded when calling POST /customers.");
            case "unknown":
                throw new errors.PaidError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} customerId
     * @param {Customers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.get("customerId")
     */
    public get(customerId: string, requestOptions?: Customers.RequestOptions): core.HttpResponsePromise<Paid.Customer> {
        return core.HttpResponsePromise.fromPromise(this.__get(customerId, requestOptions));
    }

    private async __get(
        customerId: string,
        requestOptions?: Customers.RequestOptions,
    ): Promise<core.WithRawResponse<Paid.Customer>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PaidEnvironment.Production,
                `customers/${encodeURIComponent(customerId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Paid.Customer, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PaidError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PaidError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PaidTimeoutError("Timeout exceeded when calling GET /customers/{customerId}.");
            case "unknown":
                throw new errors.PaidError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} customerId
     * @param {Paid.CustomerUpdate} request
     * @param {Customers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.update("customerId", {
     *         name: "Acme, Inc. (Updated)",
     *         phone: "123-456-7890",
     *         employeeCount: 101,
     *         annualRevenue: 1000001
     *     })
     */
    public update(
        customerId: string,
        request: Paid.CustomerUpdate,
        requestOptions?: Customers.RequestOptions,
    ): core.HttpResponsePromise<Paid.Customer> {
        return core.HttpResponsePromise.fromPromise(this.__update(customerId, request, requestOptions));
    }

    private async __update(
        customerId: string,
        request: Paid.CustomerUpdate,
        requestOptions?: Customers.RequestOptions,
    ): Promise<core.WithRawResponse<Paid.Customer>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PaidEnvironment.Production,
                `customers/${encodeURIComponent(customerId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Paid.Customer, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PaidError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PaidError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PaidTimeoutError("Timeout exceeded when calling PUT /customers/{customerId}.");
            case "unknown":
                throw new errors.PaidError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} customerId
     * @param {Customers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.delete("customerId")
     */
    public delete(customerId: string, requestOptions?: Customers.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(customerId, requestOptions));
    }

    private async __delete(
        customerId: string,
        requestOptions?: Customers.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PaidEnvironment.Production,
                `customers/${encodeURIComponent(customerId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PaidError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PaidError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PaidTimeoutError("Timeout exceeded when calling DELETE /customers/{customerId}.");
            case "unknown":
                throw new errors.PaidError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} externalId
     * @param {Customers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.getByExternalId("externalId")
     */
    public getByExternalId(
        externalId: string,
        requestOptions?: Customers.RequestOptions,
    ): core.HttpResponsePromise<Paid.Customer> {
        return core.HttpResponsePromise.fromPromise(this.__getByExternalId(externalId, requestOptions));
    }

    private async __getByExternalId(
        externalId: string,
        requestOptions?: Customers.RequestOptions,
    ): Promise<core.WithRawResponse<Paid.Customer>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PaidEnvironment.Production,
                `customers/external/${encodeURIComponent(externalId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Paid.Customer, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PaidError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PaidError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PaidTimeoutError(
                    "Timeout exceeded when calling GET /customers/external/{externalId}.",
                );
            case "unknown":
                throw new errors.PaidError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} externalId
     * @param {Paid.CustomerUpdate} request
     * @param {Customers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.updateByExternalId("externalId", {})
     */
    public updateByExternalId(
        externalId: string,
        request: Paid.CustomerUpdate,
        requestOptions?: Customers.RequestOptions,
    ): core.HttpResponsePromise<Paid.Customer> {
        return core.HttpResponsePromise.fromPromise(this.__updateByExternalId(externalId, request, requestOptions));
    }

    private async __updateByExternalId(
        externalId: string,
        request: Paid.CustomerUpdate,
        requestOptions?: Customers.RequestOptions,
    ): Promise<core.WithRawResponse<Paid.Customer>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PaidEnvironment.Production,
                `customers/external/${encodeURIComponent(externalId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Paid.Customer, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PaidError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PaidError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PaidTimeoutError(
                    "Timeout exceeded when calling PUT /customers/external/{externalId}.",
                );
            case "unknown":
                throw new errors.PaidError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} externalId
     * @param {Customers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.deleteByExternalId("externalId")
     */
    public deleteByExternalId(
        externalId: string,
        requestOptions?: Customers.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__deleteByExternalId(externalId, requestOptions));
    }

    private async __deleteByExternalId(
        externalId: string,
        requestOptions?: Customers.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PaidEnvironment.Production,
                `customers/external/${encodeURIComponent(externalId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PaidError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PaidError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PaidTimeoutError(
                    "Timeout exceeded when calling DELETE /customers/external/{externalId}.",
                );
            case "unknown":
                throw new errors.PaidError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
