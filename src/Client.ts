/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import { Customers } from "./api/resources/customers/client/Client.js";
import { Agents } from "./api/resources/agents/client/Client.js";
import { Contacts } from "./api/resources/contacts/client/Client.js";
import { Orders } from "./api/resources/orders/client/Client.js";
import { Usage } from "./wrapper/BatchUsage.js";
import { _trace, _initializeTracing } from "./tracing/tracing.js";
import { _signal } from "./tracing/signal.js";

export declare namespace PaidClient {
    export interface Options {
        environment?: core.Supplier<environments.PaidEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class PaidClient {
    protected readonly _options: PaidClient.Options;
    protected _customers: Customers | undefined;
    protected _agents: Agents | undefined;
    protected _contacts: Contacts | undefined;
    protected _orders: Orders | undefined;
    protected _usage: Usage | undefined;

    constructor(_options: PaidClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@paid-ai/paid-node",
                    "X-Fern-SDK-Version": "0.3.1",
                    "User-Agent": "@paid-ai/paid-node/0.3.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    public get customers(): Customers {
        return (this._customers ??= new Customers(this._options));
    }

    public get agents(): Agents {
        return (this._agents ??= new Agents(this._options));
    }

    public get contacts(): Contacts {
        return (this._contacts ??= new Contacts(this._options));
    }

    public get orders(): Orders {
        return (this._orders ??= new Orders(this._options));
    }

    public get usage(): Usage {
        return (this._usage ??= new Usage(this._options));
    }

    // Need to call this method before using tracing or creating wrappers.
    public async initializeTracing(collectorEndpoint?: string): Promise<void> {
        const tokenSupplier = this._options.token;
        const token = typeof tokenSupplier === "function" ? await tokenSupplier() : tokenSupplier;
        const resolvedToken = await Promise.resolve(token);
        _initializeTracing(resolvedToken, collectorEndpoint);
    }

    // Use this method to track actions like LLM costs and sending signals.
    // The callback to this function is the work that you want to trace.
    public async trace<T extends (...args: any[]) => any>(
        externalCustomerId: string,
        fn: T,
        externalAgentId?: string,
        ...args: Parameters<T>
    ): Promise<ReturnType<T>> {
        return await _trace(externalCustomerId, fn, externalAgentId, ...args);
    }

    /**
     * Sends Paid signal. Needs to be called as part of callback to Paid.trace().
     * When enableCostTracing flag is on, signal is associated
     * with cost traces from the same Paid.trace() context.
     *
     * @param eventName - The name of the signal.
     * @param enableCostTracing - Whether to associate this signal with cost traces
     * from the current Paid.trace() context (default: false)
     * @param data - Optional additional data to include with the signal
     *
     * @remarks
     * When enableCostTracing is on, the signal will be associated with cost
     * traces within the same Paid.trace() context.
     * It is advised to only make one call to this function
     * with enableCostTracing per Paid.trace() context.
     * Otherwise, there will be multiple signals that refer to the same costs.
     */
    public signal(eventName: string): void;
    public signal(eventName: string, data: Record<string, any>): void;
    public signal(eventName: string, enableCostTracing: boolean, data?: Record<string, any>): void;
    public signal(
        eventName: string, 
        enableCostTracingOrData?: boolean | Record<string, any>, 
        data?: Record<string, any>
    ): void {
        let enableCostTracing: boolean = false;
        let finalData: Record<string, any> | undefined;

        if (typeof enableCostTracingOrData === 'boolean') {
            // Case: signal(eventName, boolean, data?)
            enableCostTracing = enableCostTracingOrData;
            finalData = data;
        } else if (typeof enableCostTracingOrData === 'object') {
            // Case: signal(eventName, data)
            enableCostTracing = false;
            finalData = enableCostTracingOrData;
        }
        // Case: signal(eventName) - both remain default/undefined

        return _signal(eventName, enableCostTracing, finalData);
    }

}
