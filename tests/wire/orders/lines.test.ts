/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { PaidClient } from "../../../src/Client";

describe("Lines", () => {
    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new PaidClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            lines: [
                {
                    agentExternalId: "acme-agent",
                    name: "Order Line One",
                    description: "Order Line One is an order line for Acme, Inc.",
                },
                {
                    agentExternalId: "acme-agent-2",
                    name: "Order Line Two",
                    description: "Order Line Two is an order line for Acme, Inc.",
                },
            ],
        };
        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            customerId: "customerId",
            organizationId: "organizationId",
            startDate: "startDate",
            endDate: "endDate",
            totalAmount: 1.1,
            estimatedTax: 1.1,
            billedAmountNoTax: 1.1,
            billedTax: 1.1,
            totalBilledAmount: 1.1,
            pendingBillingAmount: 1.1,
            creationState: "active",
            orderLines: [
                {
                    id: "id",
                    orderId: "orderId",
                    agentId: "agentId",
                    name: "name",
                    description: "description",
                    startDate: "startDate",
                    endDate: "endDate",
                    totalAmount: 1.1,
                    billedAmountWithoutTax: 1.1,
                    billedTax: 1.1,
                    totalBilledAmount: 1.1,
                    creationState: "active",
                    agent: { id: "id", organizationId: "organizationId", name: "name", active: true },
                    orderLineAttributes: [{}],
                },
            ],
            customer: {
                id: "id",
                organizationId: "organizationId",
                name: "name",
                externalId: "externalId",
                phone: "phone",
                employeeCount: 1.1,
                annualRevenue: 1.1,
                taxExemptStatus: "none",
                creationSource: "manual",
                creationState: "active",
                website: "website",
                billingAddress: {
                    line1: "line1",
                    line2: "line2",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                },
            },
        };
        server
            .mockEndpoint()
            .put("/orders/orderId/lines")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.orders.lines.update("orderId", {
            lines: [
                {
                    agentExternalId: "acme-agent",
                    name: "Order Line One",
                    description: "Order Line One is an order line for Acme, Inc.",
                },
                {
                    agentExternalId: "acme-agent-2",
                    name: "Order Line Two",
                    description: "Order Line Two is an order line for Acme, Inc.",
                },
            ],
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            customerId: "customerId",
            organizationId: "organizationId",
            startDate: "startDate",
            endDate: "endDate",
            totalAmount: 1.1,
            estimatedTax: 1.1,
            billedAmountNoTax: 1.1,
            billedTax: 1.1,
            totalBilledAmount: 1.1,
            pendingBillingAmount: 1.1,
            creationState: "active",
            orderLines: [
                {
                    id: "id",
                    orderId: "orderId",
                    agentId: "agentId",
                    name: "name",
                    description: "description",
                    startDate: "startDate",
                    endDate: "endDate",
                    totalAmount: 1.1,
                    billedAmountWithoutTax: 1.1,
                    billedTax: 1.1,
                    totalBilledAmount: 1.1,
                    creationState: "active",
                    agent: {
                        id: "id",
                        organizationId: "organizationId",
                        name: "name",
                        active: true,
                    },
                    orderLineAttributes: [{}],
                },
            ],
            customer: {
                id: "id",
                organizationId: "organizationId",
                name: "name",
                externalId: "externalId",
                phone: "phone",
                employeeCount: 1.1,
                annualRevenue: 1.1,
                taxExemptStatus: "none",
                creationSource: "manual",
                creationState: "active",
                website: "website",
                billingAddress: {
                    line1: "line1",
                    line2: "line2",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                },
            },
        });
    });
});
