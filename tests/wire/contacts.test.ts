/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { PaidClient } from "../../src/Client";

describe("Contacts", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new PaidClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                externalId: "externalId",
                organizationId: "organizationId",
                customerId: "customerId",
                customerExternalId: "customerExternalId",
                salutation: "Mr.",
                firstName: "firstName",
                lastName: "lastName",
                email: "email",
                phone: "phone",
                billingStreet: "billingStreet",
                billingCity: "billingCity",
                billingStateProvince: "billingStateProvince",
                billingCountry: "billingCountry",
                billingPostalCode: "billingPostalCode",
            },
        ];
        server.mockEndpoint().get("/contacts").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.contacts.list();
        expect(response).toEqual([
            {
                id: "id",
                externalId: "externalId",
                organizationId: "organizationId",
                customerId: "customerId",
                customerExternalId: "customerExternalId",
                salutation: "Mr.",
                firstName: "firstName",
                lastName: "lastName",
                email: "email",
                phone: "phone",
                billingStreet: "billingStreet",
                billingCity: "billingCity",
                billingStateProvince: "billingStateProvince",
                billingCountry: "billingCountry",
                billingPostalCode: "billingPostalCode",
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new PaidClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            salutation: "Mr.",
            firstName: "firstName",
            lastName: "lastName",
            email: "email",
            billingStreet: "billingStreet",
            billingCity: "billingCity",
            billingCountry: "billingCountry",
            billingPostalCode: "billingPostalCode",
        };
        const rawResponseBody = {
            id: "id",
            externalId: "externalId",
            organizationId: "organizationId",
            customerId: "customerId",
            customerExternalId: "customerExternalId",
            salutation: "Mr.",
            firstName: "firstName",
            lastName: "lastName",
            email: "email",
            phone: "phone",
            billingStreet: "billingStreet",
            billingCity: "billingCity",
            billingStateProvince: "billingStateProvince",
            billingCountry: "billingCountry",
            billingPostalCode: "billingPostalCode",
        };
        server
            .mockEndpoint()
            .post("/contacts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.contacts.create({
            salutation: "Mr.",
            firstName: "firstName",
            lastName: "lastName",
            email: "email",
            billingStreet: "billingStreet",
            billingCity: "billingCity",
            billingCountry: "billingCountry",
            billingPostalCode: "billingPostalCode",
        });
        expect(response).toEqual({
            id: "id",
            externalId: "externalId",
            organizationId: "organizationId",
            customerId: "customerId",
            customerExternalId: "customerExternalId",
            salutation: "Mr.",
            firstName: "firstName",
            lastName: "lastName",
            email: "email",
            phone: "phone",
            billingStreet: "billingStreet",
            billingCity: "billingCity",
            billingStateProvince: "billingStateProvince",
            billingCountry: "billingCountry",
            billingPostalCode: "billingPostalCode",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new PaidClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            externalId: "externalId",
            organizationId: "organizationId",
            customerId: "customerId",
            customerExternalId: "customerExternalId",
            salutation: "Mr.",
            firstName: "firstName",
            lastName: "lastName",
            email: "email",
            phone: "phone",
            billingStreet: "billingStreet",
            billingCity: "billingCity",
            billingStateProvince: "billingStateProvince",
            billingCountry: "billingCountry",
            billingPostalCode: "billingPostalCode",
        };
        server
            .mockEndpoint()
            .get("/contacts/contactId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.contacts.get("contactId");
        expect(response).toEqual({
            id: "id",
            externalId: "externalId",
            organizationId: "organizationId",
            customerId: "customerId",
            customerExternalId: "customerExternalId",
            salutation: "Mr.",
            firstName: "firstName",
            lastName: "lastName",
            email: "email",
            phone: "phone",
            billingStreet: "billingStreet",
            billingCity: "billingCity",
            billingStateProvince: "billingStateProvince",
            billingCountry: "billingCountry",
            billingPostalCode: "billingPostalCode",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new PaidClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/contacts/contactId").respondWith().statusCode(200).build();

        const response = await client.contacts.delete("contactId");
        expect(response).toEqual(undefined);
    });

    test("getByExternalId", async () => {
        const server = mockServerPool.createServer();
        const client = new PaidClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            externalId: "externalId",
            organizationId: "organizationId",
            customerId: "customerId",
            customerExternalId: "customerExternalId",
            salutation: "Mr.",
            firstName: "firstName",
            lastName: "lastName",
            email: "email",
            phone: "phone",
            billingStreet: "billingStreet",
            billingCity: "billingCity",
            billingStateProvince: "billingStateProvince",
            billingCountry: "billingCountry",
            billingPostalCode: "billingPostalCode",
        };
        server
            .mockEndpoint()
            .get("/contacts/external/externalId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.contacts.getByExternalId("externalId");
        expect(response).toEqual({
            id: "id",
            externalId: "externalId",
            organizationId: "organizationId",
            customerId: "customerId",
            customerExternalId: "customerExternalId",
            salutation: "Mr.",
            firstName: "firstName",
            lastName: "lastName",
            email: "email",
            phone: "phone",
            billingStreet: "billingStreet",
            billingCity: "billingCity",
            billingStateProvince: "billingStateProvince",
            billingCountry: "billingCountry",
            billingPostalCode: "billingPostalCode",
        });
    });

    test("deleteByExternalId", async () => {
        const server = mockServerPool.createServer();
        const client = new PaidClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/contacts/external/externalId").respondWith().statusCode(200).build();

        const response = await client.contacts.deleteByExternalId("externalId");
        expect(response).toEqual(undefined);
    });
});
