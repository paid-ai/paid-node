/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { PaidClient } from "../../src/Client";
import * as Paid from "../../src/api/index";

describe("Customers", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new PaidClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                organizationId: "organizationId",
                name: "name",
                externalId: "externalId",
                phone: "phone",
                employeeCount: 1.1,
                annualRevenue: 1.1,
                taxExemptStatus: "none",
                creationSource: "manual",
                creationState: "active",
                website: "website",
                billingAddress: {
                    line1: "line1",
                    line2: "line2",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                },
            },
        ];
        server.mockEndpoint().get("/customers").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.customers.list();
        expect(response).toEqual([
            {
                id: "id",
                organizationId: "organizationId",
                name: "name",
                externalId: "externalId",
                phone: "phone",
                employeeCount: 1.1,
                annualRevenue: 1.1,
                taxExemptStatus: "none",
                creationSource: "manual",
                creationState: "active",
                website: "website",
                billingAddress: {
                    line1: "line1",
                    line2: "line2",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                },
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new PaidClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "Acme, Inc.", externalId: "acme-inc" };
        const rawResponseBody = {
            id: "63fd642c-569d-44f9-8d67-5cf4944a16cc",
            organizationId: "organizationId",
            name: "Acme, Inc.",
            externalId: "acme-inc",
            phone: "phone",
            employeeCount: 1.1,
            annualRevenue: 1.1,
            taxExemptStatus: "none",
            creationSource: "manual",
            creationState: "active",
            website: "website",
            billingAddress: {
                line1: "line1",
                line2: "line2",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
            },
        };
        server
            .mockEndpoint()
            .post("/customers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.create({
            name: "Acme, Inc.",
            externalId: "acme-inc",
        });
        expect(response).toEqual({
            id: "63fd642c-569d-44f9-8d67-5cf4944a16cc",
            organizationId: "organizationId",
            name: "Acme, Inc.",
            externalId: "acme-inc",
            phone: "phone",
            employeeCount: 1.1,
            annualRevenue: 1.1,
            taxExemptStatus: "none",
            creationSource: "manual",
            creationState: "active",
            website: "website",
            billingAddress: {
                line1: "line1",
                line2: "line2",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new PaidClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "63fd642c-569d-44f9-8d67-5cf4944a16cc",
            organizationId: "organizationId",
            name: "Acme, Inc.",
            externalId: "acme-inc",
            phone: "123-456-7890",
            employeeCount: 100,
            annualRevenue: 1000000,
            taxExemptStatus: "exempt",
            creationSource: "api",
            creationState: "active",
            website: "https://acme.com",
            billingAddress: {
                line1: "123 Main St",
                line2: "Apt 4B",
                city: "Anytown",
                state: "CA",
                zipCode: "12345",
                country: "US",
            },
        };
        server
            .mockEndpoint()
            .get("/customers/customerId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.get("customerId");
        expect(response).toEqual({
            id: "63fd642c-569d-44f9-8d67-5cf4944a16cc",
            organizationId: "organizationId",
            name: "Acme, Inc.",
            externalId: "acme-inc",
            phone: "123-456-7890",
            employeeCount: 100,
            annualRevenue: 1000000,
            taxExemptStatus: "exempt",
            creationSource: "api",
            creationState: "active",
            website: "https://acme.com",
            billingAddress: {
                line1: "123 Main St",
                line2: "Apt 4B",
                city: "Anytown",
                state: "CA",
                zipCode: "12345",
                country: "US",
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new PaidClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "Acme, Inc. (Updated)",
            phone: "123-456-7890",
            employeeCount: 101,
            annualRevenue: 1000001,
        };
        const rawResponseBody = {
            id: "63fd642c-569d-44f9-8d67-5cf4944a16cc",
            organizationId: "organizationId",
            name: "Acme, Inc. (Updated)",
            externalId: "acme-inc",
            phone: "123-456-7890",
            employeeCount: 101,
            annualRevenue: 1000001,
            taxExemptStatus: "none",
            creationSource: "manual",
            creationState: "active",
            website: "website",
            billingAddress: {
                line1: "line1",
                line2: "line2",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
            },
        };
        server
            .mockEndpoint()
            .put("/customers/customerId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.update("customerId", {
            name: "Acme, Inc. (Updated)",
            phone: "123-456-7890",
            employeeCount: 101,
            annualRevenue: 1000001,
        });
        expect(response).toEqual({
            id: "63fd642c-569d-44f9-8d67-5cf4944a16cc",
            organizationId: "organizationId",
            name: "Acme, Inc. (Updated)",
            externalId: "acme-inc",
            phone: "123-456-7890",
            employeeCount: 101,
            annualRevenue: 1000001,
            taxExemptStatus: "none",
            creationSource: "manual",
            creationState: "active",
            website: "website",
            billingAddress: {
                line1: "line1",
                line2: "line2",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new PaidClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/customers/customerId").respondWith().statusCode(200).build();

        const response = await client.customers.delete("customerId");
        expect(response).toEqual(undefined);
    });

    test("getByExternalId", async () => {
        const server = mockServerPool.createServer();
        const client = new PaidClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "63fd642c-569d-44f9-8d67-5cf4944a16cc",
            organizationId: "organizationId",
            name: "Acme, Inc.",
            externalId: "acme-inc",
            phone: "123-456-7890",
            employeeCount: 100,
            annualRevenue: 1000000,
            taxExemptStatus: "exempt",
            creationSource: "api",
            creationState: "active",
            website: "https://acme.com",
            billingAddress: {
                line1: "123 Main St",
                line2: "Apt 4B",
                city: "Anytown",
                state: "CA",
                zipCode: "12345",
                country: "US",
            },
        };
        server
            .mockEndpoint()
            .get("/customers/external/externalId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.getByExternalId("externalId");
        expect(response).toEqual({
            id: "63fd642c-569d-44f9-8d67-5cf4944a16cc",
            organizationId: "organizationId",
            name: "Acme, Inc.",
            externalId: "acme-inc",
            phone: "123-456-7890",
            employeeCount: 100,
            annualRevenue: 1000000,
            taxExemptStatus: "exempt",
            creationSource: "api",
            creationState: "active",
            website: "https://acme.com",
            billingAddress: {
                line1: "123 Main St",
                line2: "Apt 4B",
                city: "Anytown",
                state: "CA",
                zipCode: "12345",
                country: "US",
            },
        });
    });

    test("updateByExternalId", async () => {
        const server = mockServerPool.createServer();
        const client = new PaidClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            organizationId: "organizationId",
            name: "name",
            externalId: "externalId",
            phone: "phone",
            employeeCount: 1.1,
            annualRevenue: 1.1,
            taxExemptStatus: "none",
            creationSource: "manual",
            creationState: "active",
            website: "website",
            billingAddress: {
                line1: "line1",
                line2: "line2",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
            },
        };
        server
            .mockEndpoint()
            .put("/customers/external/externalId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.updateByExternalId("externalId", {});
        expect(response).toEqual({
            id: "id",
            organizationId: "organizationId",
            name: "name",
            externalId: "externalId",
            phone: "phone",
            employeeCount: 1.1,
            annualRevenue: 1.1,
            taxExemptStatus: "none",
            creationSource: "manual",
            creationState: "active",
            website: "website",
            billingAddress: {
                line1: "line1",
                line2: "line2",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
            },
        });
    });

    test("deleteByExternalId", async () => {
        const server = mockServerPool.createServer();
        const client = new PaidClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/customers/external/externalId").respondWith().statusCode(200).build();

        const response = await client.customers.deleteByExternalId("externalId");
        expect(response).toEqual(undefined);
    });
});
